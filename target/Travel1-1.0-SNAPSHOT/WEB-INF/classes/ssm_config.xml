<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:context="http://www.springframework.org/schema/context"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
			xmlns:mvc="http://www.springframework.org/schema/mvc"
			xmlns:tx="http://www.springframework.org/schema/tx"
			xmlns:aop="http://www.springframework.org/schema/aop"
			xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
				http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<mvc:annotation-driven></mvc:annotation-driven>
	<!-- 设置自动扫描包 xxxx -->
	<context:component-scan base-package="com.lx"></context:component-scan>
	
	<!-- 1. 配置数据源 -->
	<!--  导入数据源设置的属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />	
	<!-- 2. 配置Druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" lazy-init="true">
		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：               
		                监控统计用的filter:stat
		                日志用的filter:log4j
		                防御SQL注入的filter:wall
		   	      -->
        <property name="filters" value="${druid.filters}" />  
      	<!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${oracle.driver}" />
        <property name="url" value="${oracle.url}" />
        <property name="username" value="${oracle.username}" />
        <property name="password" value="${oracle.password}" />    
		
		<!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->        
        <property name="maxWait" value="${druid.maxWait}" />
        
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->  
        <property name="validationQuery" value="${druid.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />        
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        
        
	</bean>
	<!-- 3. 整合MyBatis -->
	<!-- 配置SqlSessionFactory对象  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.lx.entity" />
        <!-- 扫描sql的Mapper需要的xml文件配置文件: 如果有xml映射文件，则需要添加以下项  -->
         <property name="mapperLocations" value="classpath:com/lx/mapper/*.xml" /> 
        <!-- 如果仍然有MyBatis的配置文件，添加以下项 -->
        <!-- <property name="configLocation" value="classpath:mybatis-config.xml"></property>  -->
    </bean>
    <!-- 4. 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.lx.dao"></property>
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property> 
	 </bean>
	 
	 <!-- 5. 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--  配置事务传播特性 --> 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>  <!-- 读取数据隔离级别为只读 -->
			<tx:method name="*"/> <!-- 其他操作使用默认隔离级别 -->
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务切点，并把事务切点和事务属性关联起来 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.lx.service.*.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<!--  配置SpringMvc视图解析器   -->
		<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<!-- 访问页面的前缀【路径，必须“/”开头】：设置项目的所有页面 jsp都是在项目的pages/目录 -->
			<property name="prefix" value="/"></property>
			<!-- 后缀：指明页面的扩展名 -->
			<property name="suffix" value=".html"></property>
		</bean>
		<!-- 文件上传配置 -->
		<!-- multipartResolver名字不能改，它和后台DispatcherServlet中的常量保持一致，自动注入 -->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
		   <property name="defaultEncoding" value="utf-8"></property>   
		   <property name="maxUploadSize" value="104857600"></property>  
		   <property name="maxInMemorySize" value="4096"></property>  
	   </bean>  
	</beans>